{
  "_args": [
    [
      {
        "raw": "gulp-count",
        "scope": null,
        "escapedName": "gulp-count",
        "name": "gulp-count",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Chris/Desktop/DeathBoys/theme"
    ]
  ],
  "_from": "gulp-count@latest",
  "_id": "gulp-count@0.3.0",
  "_inCache": true,
  "_location": "/gulp-count",
  "_nodeVersion": "5.3.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/gulp-count-0.3.0.tgz_1473959115884_0.38854540581814945"
  },
  "_npmUser": {
    "name": "giladgray",
    "email": "giladgray@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {
    "readable-stream": "2.3.3",
    "xtend": "4.0.1"
  },
  "_requested": {
    "raw": "gulp-count",
    "scope": null,
    "escapedName": "gulp-count",
    "name": "gulp-count",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-count/-/gulp-count-0.3.0.tgz",
  "_shasum": "88c36b87952bf40d9a5d1e16580a76b394ac3f1e",
  "_shrinkwrap": null,
  "_spec": "gulp-count",
  "_where": "/Users/Chris/Desktop/DeathBoys/theme",
  "author": {
    "name": "Palantir Technologies"
  },
  "bugs": {
    "url": "https://github.com/palantir/gulp-count/issues"
  },
  "dependencies": {
    "gulp-util": "~3.0.0",
    "through2": "~2.0.0",
    "xtend": "~4.0.0"
  },
  "description": "count files in vinyl streams",
  "devDependencies": {
    "coffee-script": "1.x",
    "mocha": "2.x"
  },
  "directories": {},
  "dist": {
    "shasum": "88c36b87952bf40d9a5d1e16580a76b394ac3f1e",
    "tarball": "https://registry.npmjs.org/gulp-count/-/gulp-count-0.3.0.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "52ec393ee9ca00ed4fb74f4c31fcb3bb4f26d826",
  "homepage": "https://github.com/palantir/gulp-count",
  "keywords": [
    "gulp",
    "gulpplugin",
    "count",
    "debug",
    "files"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "giladgray",
      "email": "giladgray@gmail.com"
    }
  ],
  "name": "gulp-count",
  "optionalDependencies": {},
  "readme": "# gulp-count [![Build Status](https://travis-ci.org/palantir/gulp-count.svg?branch=master)](https://travis-ci.org/palantir/gulp-count)\n\n> Count files in vinyl streams. Log pretty messages.\n\n![gulp-count in action](screenshot.png)\n\nThis plugin solves a similar problem to [gulp-debug](https://github.com/sindresorhus/gulp-debug) but is designed as an actual permanent part of your workflow, not just a debug tool (though it still makes a great debug tool!). As such, it provides more control over logging to customize as needed.\n\n## Usage\nFirst, install `gulp-count` as a development dependency:\n\n```shell\n> npm install --save-dev gulp-count\n```\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\nvar count = require('gulp-count');\n\ngulp.task('copy', function() {\n    gulp.src('assets/**.*')\n        .pipe(gulp.dest('build'))\n        .pipe(count('## assets copied'));\n});\n```\n\n\n## API\ngulp-count can be called with a string message template, an options object, or both.\n\n```javascript\ngulp.src('*.html')\n    .pipe(count()) // logs \"36 files\"\n    .pipe(count('<%= counter %> HTML files'))  // logs \"36 HTML files\"\n    .pipe(count('found ## pages', {logFiles: true})) // logs each path and \"found 36 pages\"\n    .pipe(count({\n        message: '<%= files %>? That\\'s ## too many!'\n        logger: (msg) -> alert(msg) // alerts \"36 files? That's 36 too many!\"\n    });\n```\n\n### `count(options?)`\n### `count(message, options?)`\n\n##### `options.message: boolean | string = \"<%= files %>\"`\n\nTemplate string for total count message, passed through [`gutil.template`](https://github.com/gulpjs/gulp-util#templatestring-data).\n\nTemplate can use two variables:\n\n1. `counter` - the number of files encountered in this stream,\n2. `files` - a correctly pluralized string of the format \"X file[s]\" where X is `counter`.\n\nThe template also expands the shorthand `\"##\"` to `\"<%= counter %>\"`.\n\nAn explicit `false` value will disable the message (use `logFiles` or `logEmpty` instead).\n\n##### `options.logFiles: boolean | string = false`\n\nWhether to log each file path as it is encountered. `options.cwd` determines base path for logging.\n\nIf a string is provided then it is used as the message template. Template receives two variables:\n\n1. `file` - the current Vinyl file instance\n2. `path` - file path resolved relative to `options.cwd` and colored yellow.\n\n##### `options.logEmpty: boolean | string = false`\n\nWhether to log the message when the stream is empty.\n\nIf a string is provided then it is used as the message template and receives the same variables as `options.message`.\n\nSetting `{ message: false, logEmpty: true }` will log _if and only if_ the stream is empty.\n\n##### `options.title: string`\n\nString prepended to every message to distinguish the output of multiple instances logging at once.\nA falsy value will print nothing.\n\n##### `options.cwd: string = \"\"`\n\nCurrent working directory against which file paths are resolved in template strings.\n\n##### `options.logger: (message) => any = gutil.log`\n\nLogger function, called once at the end and once per file if `logFiles` is enabled.\n\n\n## License\nMIT &copy; [Palantir Technologies](http://palantir.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/palantir/gulp-count.git"
  },
  "scripts": {
    "prepublish": "coffee -c index.coffee",
    "test": "mocha --compilers coffee:coffee-script/register test.coffee"
  },
  "version": "0.3.0"
}
